

List<Tok>
 
enum Op { Plus, Minus, Times, Divide }
  
enum Tok {
  Num(List<Dig>),
  Op(Op)
}    

fn postfix_parse (expr: List<Tok>, stack:List<i32>) -> i32 {
  match pop(expr) {
    (None, _) => {
      match stack {
        List::Nil => panic!("error"),
        List::Cons(c) => { assert_eq!(*c.tl, List::Nil); c.hd }
      }
    }
    (Some(tok), expr) =>
      match tok {
        Tok::Op(op) => {
          let (x,stack) = pop(stack);
          let (y,stack) = pop(*stack);
          let z = match op {
            Op::Plus => x + y,
            _ => unimplemented!()
          };
          let stack = push(stack, z);
          postfix_parse(*expr, stack)
        }
      }
  }
}

fn postfix_fold (expr: List<Tok>) -> i32 {
  let stack =
    fold(expr, List::Nil,
         |stack, tok| {
           match tok {
             Tok::Op(op) => {
               let (x,stack) = pop(stack);
               let (y,stack) = pop(*stack);
               let z = match op {
                 Op::Plus => x + y,
                 _ => unimplemented!()
               };
               push(stack, z)
             }
           }});
  match stack {
    List::Nil => panic!("error"),
    List::Cons(c) => {
      assert_eq!(*c.tl, List::Nil);
      c.hd
    }
  }  
}
